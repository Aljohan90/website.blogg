<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        kJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQ
        kJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQ
        kJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkEE9XRy8k1t8Wh6QkJCEYCtRSH+uYAaQkJCQkJCQkHEf
        EpWhmAAAmHW1WJCQW6A7sAAAALAYm4VxkJCQkJBJwDQAOBjBqk2HlU5DkB5rAKtwIAMgBXUANDpBkJCQ
        ZhJomFwjYBVxQYSyfDGQQWpZiXoGQQalhVYAq3KQkJCaFwAubpCQkJCQkJCQkJCQHpCQkJCQkJCQYBMA
        gLaQKBMAlxuQkJCQkJCQkJCQkJCQkJCQkJCQkJCQKQDBlpA2aFcckJCQg1oekJCRv5CQkJCQkJCQkJCQ
        kJB7AI56kBIAU42QkLZPOWOQBzwUqZCQkJCQkJCQkJCQSYcAdIQVrwCbQZCQHgiMo5CIRxozkJCQkJCQ
        kJCQnnZiFwCokAxAAD6QkJCQv6wtkI9uspCQkJCQkB5aQ0wDGAAAqjGQjQUAppCQkJCQkJCQkJCQkJCQ
        kB4Bb4KhAAAXJBaykJBJDgBSkJCQkHGtd5CQVCqQkJC2YWwAmKsmtLMoHpCQkAaqALoGkJCPZRk/kLtC
        gTeQkHxsAC+4sWa2kJCQkJCQkIYACzWQkB0lIm2QaadGuZCQZwBOhZCQkJCQkJCQkJCQciEAApCQkD1L
        KpAwLA2QkB6LALoqkJCQkJCQkJCQkJAVXwCVLJCQkJCQkJCQkJCQtgoAEJ6QkJCQkJCQkJCQkJCfJwCv
        opCQkJCQkJCQkJCQcwB5kpCQkJCQkJCQkJCQkLZZIQATiqwqkJBxegmEkJCZbABNWAaQkJ4xH15QkJCQ
        kHE2pAA4C0S9Yk2dU36QkLaaRQBsIJS9EFOhEYmQkJCQkLYJMmRXAAAAALAmG5CQkAacSqEAAAAAV74E
        MZCQkJCQkJAeblV4D6i8Kz22kJCQkJBJtyMPfZOfbkGQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQ
        kJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQ
        kJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQ
        kJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAADAA
        AABgAAAAAQAIAAAAAAAACQAAAAAAAAAAAAAAAQAAAAAAAAAAAABTU1MAFxcXAPX19gDi4uIApqamAGpq
        agAtLi4AaWttAFhXVgD5+fkAvb29AIGBgQBFRUUACAkJAAkJCQAgICAA6+vrAK+vrwBzc3MANzc3ACUk
        IwDGxsYAioqKABISEgDd3d0AoaGhAGVlZQApKSkA9PT0ALi4uAB8fHwABAQEAM/PzwCTk5MAV1dXABsb
        GwDm5uYAqqqqAG5ubgAyMjIA/f39AMHBwQBJSUkADQ0NALCurQDY2NgAYGBgACQkJAARERAAEhEQADs7
        OwBSUlIAFhYWAKWlpQCkpqgAaWlpAKWmqABoamwA+Pj4ALu8vAC8vLwAgICAAERERAAICAgA09PTAFtb
        WwAfHx8AcnJyAMXFxQCKiIYATU1NABEREQDc3NwAoKCgAN3c3ADIyssAKCgoAPPz8wC3t7cAe3t7AAMD
        AwAtLS4AGRoaAJGTlQDl5eUAqampADExMQDAv70A/Pz8AMDAwAAMDAwA19fXAJubmwBfX18AIyMjACQj
        IwDu7u4AdnZ2ADo6OgDc29oAjY2NAMnKzAC1t7gAFRUVAODg4AD39/cAu7u7AJGTlgB/f38ABwcHANLS
        0gCWlpYAWlpaAB4eHgDp6ekAra2tAHFxcQA1NTUA19fYAMTExACIiIgAioeFAExMTAAQEBAAOjk4ANvb
        2wBjY2MAJycnAPLy8gC2trYAtre5AD4+PgACAgIAzczKAFVVVQAZGRkAu7u8AOTk5ACoqKgAMDAwAPv7
        +wC/v78Ag4ODAAsLCwDW1tYAmpqaAF5eXgAiIiIA7e3tAHV1dQA5OTkAyMjIAI2LiQCMjIwAFBQUAN/f
        3wBmaGoAKysrAM7MywD29vYAGRkaAEJCQgDR0dEA+vr5AJWVlQDAvr0A6OjoAKysrABwcHAANDQ0AP//
        /wDDw8MAxMPDAA8PDwCenp4AJiYmAPHx8QC1tbUAeXl5AD09PQABAQEAkJCQAFRUVAAYGBgA4+PjAKen
        pwBra2sALy8vAPr6+gC+vr4AgoKCAAoKCgDV1dUAmZmZACEhIQBKS0wAsa+tAOzs7ADt7OwAdHR0ADg4
        OADHx8cAjYqIAIuLiwBPT08AExMTAKKiogBmZmYAZWdpACoqKgD19fUAubm5AH19fQBBQUEABQUFABwc
        HADn5+cAb29vADMzMwD+/v4AwsLCAIaGhgBKSkoADg4OANnZ2QCdnZ0AJSUlAPDw8AC0tLQAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACrq6urq6urq6urq6urq6urq6urq6ur
        q6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6ur
        q6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6ur
        q6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6ur
        q6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6ur
        q6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6ur
        q6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6ur
        q6urq6urq6urq6urCpxrkr+WdWLeGt1VWaurq6urqzucvuKPyHWzzFYhsaurq6urq6urq6urq6urq6ca
        NBBAtQAAAAAAtVvjPo2rq6slcEcQD7UAAAAAAFHOM3mcq6urq6urq6urq6ugz6ogAAAAAAAAAAAAAAAA
        1qCrq6sMAAAAAAAAAAAAAAAAALXSuo2rq6urq6urq6fQQAAAALWbdoe7yKleP7BA1qCrq6tiAACQMKKT
        qcgGNIxbAAAArpLcq6urq6urcwG1AABRqmUh5Fmrq6vcalVaEr2rq6ttyY+OiqDcq6urjcYLcUAAAIhF
        q6urq6s7BgAAAHxtp6urq6urq6urq6urq6urq6u5Yaurq6urq6urq6uroD7XAACTjaurq6tWwAAAGEpZ
        q6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq+QNAABDGaurq2G0AAAgFymrq6urq6urq6urq6ur
        q6urq6urq6urq6urq6urq6urq6tlAABAPaurqxJuAAA/Yaurq6urq6urq6urq6urq6urq6urq6urq6ur
        q6urq6urq6uoUQCFVqur3BsAANc2q6urq6vcc8erq6ur3HPHq6urq6urq6urq6urq6urq6urq6sFhQCF
        VqurxlcAAE2Kq6urq6tnUn2fq6urgwd9hqurq6urq6urq6urq6urq6urq9ypAAAPC6urb5sAACNZq6ur
        q6vRAABGq6urnQAAequrq6urq6urq6urq6urq6urq4K4AABfaaur1G4AAG2rq6urq6s3oRVYq6urOVNg
        pqurq6urq6urq6urq6urqykEmtgAAAB1KauruoUAAMKrq6urq6uNXEspq6urjXdLKaurq6urq6urq6ur
        3OSjSn+wUQAAAJecq6urrwAAtTarq6urq6urq6urq6urq6urq6urq6urq6urKZyLuxSbhQAAAABRP2+r
        q6urrwAAhQWrq6urq6urq6urq6urq6urq6urq6urq6tcdZQgAAAAAAAAD6q2Eaurq6urVoUAAF2rq6ur
        q6urq6urq6urq6urq6urq6ur3KjjAAAAAAAgiNZQ1Marq6urq6urCw8AAL+rq6urq6sDia29q6urAzyt
        pKurq6urHrgAAABuKNomLtOrq6urq6urq6urLogAAEIpq6urq6tUDjLFq6urbA4xLaurq6uVhAAAANu6
        xtyrq6urq6urq6urq6ursWMAAJ7Zq6urq6s6AACZq6urCAAAy6urq6tPDwAAyeGrq6urq6urq6urq6ur
        q6urqxMAAG6oq6urq6tMxAlkq6urZsQJZKurq6vMAADXuqurq6urq6urq6urq6urq6urqwssAABHTqur
        q6uragqrq6urq2oKq6urq6uzAAACkaurq6urq6urq6urq6urq6urqx3fAABAr6urq6urq6urq6urq6ur
        q6urq6sfAACI4aurq6urq6urq6urq6urq6urq6vl4AAAw6yrq6urq6urq6urq6urq6urq6ulAADAa6ur
        q6urq6urq6urq6urq6urq6u92gAAABxr3Kurq6urq6urq6urq6urq6us4AAAOI2rq6urq6urq6urq6ur
        q6urq6urp3sAAAACDGncq6urq6urq6spCqurq6uBDQAALCJqq6urq6urq6uNSc9pq6urq6urq5x7tQAA
        hYAndEGKc9lJrF0vXaurq6urskgAAMC3VsElc1UuC7aHcnzKq6urq6urq6tzRK4AAAAA15tf0oAkW7UA
        H6urq6urWbYsAAAA1zXj0jC4D7UAACyYq6urq6urq6urvdTNrgAAAAAAAAAAAAAAbaurq6urq42LvIUA
        AAAAAAAAAAAAD4R+q6urq6urq6urq6vTrB8/X85bwCxo4w1Qwaurq6urq6urisI0TZtbwCxogCvVa5Wr
        q6urq6urq6urq6urq6uguaN4KhZBVWqrq6urq6urq6urq6u92W94KsrB2Turq6urq6urq6urq6urq6ur
        q6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6ur
        q6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6ur
        q6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6ur
        q6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6ur
        q6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6ur
        q6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6ur
        q6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6ur
        q6sAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>